"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Webhooks = void 0;
const error_1 = require("../../core/error");
const core_1 = require("../core");
class Webhooks extends core_1.APIResource {
    /**
     * Validate and register a webhook URL with PayOS.
     * PayOS will test the webhook endpoint by sending a validation request to it.
     * If the webhook responds correctly, it will be registered for payment notifications.
     *
     * @param {string} webhookUrl - Your webhook endpoint URL that will receive payment notifications
     * @param {RequestOptions<ConfirmWebhookRequest>} options Additional options.
     * @returns {Promise<ConfirmWebhookResponse>} The confirmed webhook URL result
     * @throws {PayOSError} When webhook URL is invalid or validation fails
     */
    async confirm(webhookUrl, options) {
        if (!webhookUrl || webhookUrl.length === 0) {
            throw new error_1.WebhookError('Webhook URL invalid.');
        }
        try {
            const data = await this._client.post('/confirm-webhook', {
                body: { webhookUrl },
                ...options,
            });
            return data;
        }
        catch (error) {
            // The error comes from PayOS API when validating the webhook URL
            // PayOS tests the webhook endpoint and reports back the validation result
            if (error instanceof error_1.PayOSError) {
                // Re-throw with more descriptive messages based on PayOS validation response
                throw new error_1.WebhookError(`Webhook validation failed: ${error.message}`);
            }
            throw error;
        }
    }
    /**
     * Verify the webhook data sent from payOS.
     *
     * @param {Webhook} webhook The request body receive from payOS.
     * @returns {Promise<WebhookData>} The verified webhook data.
     */
    async verify(webhook) {
        const { data, signature } = webhook;
        if (!data) {
            throw new error_1.WebhookError('Invalid webhook data');
        }
        if (!signature) {
            throw new error_1.WebhookError('Invalid signature');
        }
        const signedSignature = await this._client.crypto.createSignatureFromObj(data, this._client.checksumKey);
        if (!signedSignature || signedSignature !== signature) {
            throw new error_1.WebhookError('Data not integrity');
        }
        return data;
    }
}
exports.Webhooks = Webhooks;
