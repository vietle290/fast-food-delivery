"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Payouts = void 0;
const pagination_1 = require("../../../core/pagination");
const resource_1 = require("../../../core/resource");
const batch_1 = require("./batch");
class Payouts extends resource_1.APIResource {
    constructor() {
        super(...arguments);
        this.batch = new batch_1.Batch(this._client);
    }
    /**
     * Create a new payout.
     *
     * @param {PayoutRequest} payoutData The details of the payout to be created.
     * @param {string|undefined} idempotencyKey A unique key for ensuring idempotency.
     *   Use a UUID or other high-entropy string so that retries of the
     *   same request are recognized and duplicated payouts are prevented.
     * @param {RequestOptions<PayoutBatchRequest>} options Additional options.
     * @returns {Promise<Payout>}  A promise that resolves to the newly created `Payout` object.
     */
    async create(payoutData, idempotencyKey = this._client.crypto.createUuidv4(), options) {
        const data = await this._client.post('/v1/payouts/', {
            body: payoutData,
            signatureOpts: { response: 'header', request: 'header' },
            headers: {
                'x-idempotency-key': idempotencyKey,
            },
            ...options,
        });
        return data;
    }
    /**
     * Retrieves detailed information about a specific payout.
     *
     * @param {string} payoutId The unique identifier of the payout to retrieve.
     * @param {RequestOptions} options Additional options.
     * @returns {Promise<Payout>} A promise that resolves to a `Payout` object containing the payout’s details.
     */
    async get(payoutId, options) {
        const data = await this._client.get(`/v1/payouts/${payoutId}`, {
            signatureOpts: { response: 'header' },
            ...options,
        });
        return data;
    }
    /**
     * Estimate credit required for one or multiple payouts.
     *
     * @param {PayoutRequest|PayoutBatchRequest} payoutData The payout details—either a single payout request or a batch of them.
     * @param {RequestOptions<PayoutRequest|PayoutBatchRequest>} options Additional options.
     * @returns {Promise<EstimateCredit>} A promise resolving to an object containing the estimated credit required.
     */
    async estimateCredit(payoutData, options) {
        const data = await this._client.post('/v1/payouts/estimate-credit', {
            body: payoutData,
            signatureOpts: { request: 'header' },
            ...options,
        });
        return data;
    }
    /**
     * Retrieves a paginated list of payouts filtered by the given criteria.
     *
     * @param {GetPayoutListParam} [params={ limit: 10, offset: 0 }] The filtering options including pagination parameters.
     * @param {RequestOptions} options Additional options.
     * @returns {Promise<GenericPage<Payout>>} A promise that resolves with a page of payouts matching the specified criteria.
     */
    async list(params = { limit: 10, offset: 0 }, options) {
        // Convert Date objects to ISO strings for API
        const processedParams = {};
        Object.entries(params).forEach(([key, value]) => {
            if (value instanceof Date) {
                processedParams[key] = value.toISOString();
            }
            else if (Array.isArray(value)) {
                processedParams[key] = value.join(',');
            }
            else if (value) {
                processedParams[key] = value;
            }
        });
        const finalOptions = {
            path: '/v1/payouts',
            method: 'GET',
            query: processedParams,
            signatureOpts: { response: 'header' },
            ...options,
        };
        const data = await this._client.request(finalOptions);
        return new pagination_1.GenericPage(this._client, data, finalOptions);
    }
}
exports.Payouts = Payouts;
