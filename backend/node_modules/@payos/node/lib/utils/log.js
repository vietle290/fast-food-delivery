"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatRequestDetail = exports.parseLogLevel = void 0;
exports.loggerFor = loggerFor;
const values_1 = require("./values");
const levelNumbers = {
    off: 0,
    error: 200,
    warn: 300,
    info: 400,
    debug: 500,
};
function noop() { }
const noopLogger = {
    error: noop,
    warn: noop,
    info: noop,
    debug: noop,
};
function makeLogFn(fnLevel, logger, logLevel) {
    if (!logger || levelNumbers[fnLevel] > levelNumbers[logLevel]) {
        return noop;
    }
    return logger[fnLevel].bind(logger);
}
const cachedLoggers = /* @__PURE__ */ new WeakMap();
function loggerFor(client) {
    const logger = client.logger;
    const logLevel = client.logLevel ?? 'off';
    if (!logger) {
        return noopLogger;
    }
    const cachedLogger = cachedLoggers.get(logger);
    if (cachedLogger && cachedLogger[0] === logLevel) {
        return cachedLogger[1];
    }
    const levelLogger = {
        error: makeLogFn('error', logger, logLevel),
        warn: makeLogFn('warn', logger, logLevel),
        info: makeLogFn('info', logger, logLevel),
        debug: makeLogFn('debug', logger, logLevel),
    };
    cachedLoggers.set(logger, [logLevel, levelLogger]);
    return levelLogger;
}
const parseLogLevel = (maybeLevel, sourceName, client) => {
    if (!maybeLevel) {
        return undefined;
    }
    if ((0, values_1.hasOwn)(levelNumbers, maybeLevel)) {
        return maybeLevel;
    }
    loggerFor(client).warn(`${sourceName} was set to ${JSON.stringify(maybeLevel)}, expected one of ${JSON.stringify(Object.keys(levelNumbers))}`);
    return undefined;
};
exports.parseLogLevel = parseLogLevel;
const formatRequestDetail = (config) => {
    if (config.headers) {
        const sanitizedHeaders = Object.fromEntries(Object.entries(config.headers).map(([key, value]) => [
            key,
            (key.toLowerCase() === 'authorization' ||
                key.toLowerCase() === 'cookie' ||
                key.toLowerCase() === 'set-cookie' ||
                key.toLowerCase() === 'x-client-id' ||
                key.toLowerCase() === 'x-api-key') ?
                '***'
                : value,
        ]));
        config.headers = sanitizedHeaders;
    }
    return config;
};
exports.formatRequestDetail = formatRequestDetail;
