"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deepSortObj = exports.sortObjDataByKey = void 0;
/**
 * Sorts the keys of an object in ascending order and returns a new object with the sorted keys.
 *
 * @param object - The object whose keys are to be sorted.
 * @returns A new object with keys sorted in ascending order.
 */
const sortObjDataByKey = function (object) {
    const orderedObject = Object.keys(object)
        .sort()
        .reduce((obj, key) => {
        obj[key] = object[key];
        return obj;
    }, {});
    return orderedObject;
};
exports.sortObjDataByKey = sortObjDataByKey;
/**
 * Deep sort object with optional array sorting
 * @param obj Object data
 * @param sortArrays Whether to sort arrays or maintain their order
 * @returns Sorted object data
 */
const deepSortObj = (obj, sortArrays = false) => {
    return Object.keys(obj)
        .sort()
        .reduce((acc, key) => {
        const value = obj[key];
        if (Array.isArray(value)) {
            if (sortArrays) {
                // Sort array elements
                acc[key] = value
                    .map((item) => (typeof item === 'object' && item !== null ? (0, exports.deepSortObj)(item, sortArrays) : item))
                    .sort((a, b) => {
                    // Sort primitive values
                    if (typeof a !== 'object' && typeof b !== 'object') {
                        return String(a).localeCompare(String(b));
                    }
                    // For objects, sort by JSON string representation
                    return JSON.stringify(a).localeCompare(JSON.stringify(b));
                });
            }
            else {
                // Maintain array order, but sort objects within arrays
                acc[key] = value.map((item) => typeof item === 'object' && item !== null ? (0, exports.deepSortObj)(item, sortArrays) : item);
            }
        }
        else if (typeof value === 'object' && value !== null) {
            acc[key] = (0, exports.deepSortObj)(value, sortArrays);
        }
        else {
            acc[key] = value;
        }
        return acc;
    }, {});
};
exports.deepSortObj = deepSortObj;
