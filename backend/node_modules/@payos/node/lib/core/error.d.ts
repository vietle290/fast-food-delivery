export declare class PayOSError extends Error {
}
export declare class APIError<TStatus extends number | undefined = number | undefined, THeaders extends Headers | undefined = Headers | undefined, TError extends object | undefined = object | undefined> extends PayOSError {
    readonly status: TStatus;
    readonly headers: THeaders;
    readonly error: TError;
    readonly code: string | null | undefined;
    readonly desc: string | null | undefined;
    constructor(status: TStatus, error: TError, message: string | undefined, headers: THeaders);
    private static makeMessage;
    static generateError(status: number | undefined, errorResponse: object | undefined, message: string | undefined, headers: Headers | undefined): APIError;
}
export declare class UserAbortError extends APIError<undefined, undefined, undefined> {
    constructor(message?: string | undefined);
}
export declare class ConnectionError extends APIError<undefined, undefined, undefined> {
    constructor(message?: string | undefined);
}
export declare class ConnectionTimeoutError extends APIError<undefined, undefined, undefined> {
    constructor(message?: string | undefined);
}
export declare class BadRequestError extends APIError<400, Headers> {
}
export declare class UnauthorizedError extends APIError<401, Headers> {
}
export declare class ForbiddenError extends APIError<403, Headers> {
}
export declare class NotFoundError extends APIError<404, Headers> {
}
export declare class TooManyRequestError extends APIError<429, Headers> {
}
export declare class InternalServerError extends APIError<number, Headers> {
}
export declare class InvalidSignatureError extends PayOSError {
    constructor(message?: string);
}
export declare class WebhookError extends PayOSError {
    constructor(messages?: string);
}
